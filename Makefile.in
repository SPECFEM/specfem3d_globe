#=====================================================================
#
#          S p e c f e m 3 D  G l o b e  V e r s i o n  3 . 5
#          --------------------------------------------------
#
#                 Dimitri Komatitsch and Jeroen Tromp
#    Seismological Laboratory - California Institute of Technology
#        (c) California Institute of Technology July 2004
#
#    A signed non-commercial agreement is required to use this program.
#   Please check http://www.gps.caltech.edu/research/jtromp for details.
#           Free for non-commercial academic research ONLY.
#      This program is distributed WITHOUT ANY WARRANTY whatsoever.
#      Do not redistribute this program without written permission.
#
#=====================================================================
#
# Copyright July 2004, by the California Institute of Technology.
# ALL RIGHTS RESERVED. United States Government Sponsorship Acknowledged.
#
# Any commercial use must be negotiated with the Office of Technology
# Transfer at the California Institute of Technology. This software may be
# subject to U.S. export control laws and regulations. By accepting
# this software, the user agrees to comply with all applicable U.S. export laws
# and regulations, including the International Traffic and Arms Regulations,
# 22 C.F.R. 120-130 and the Export Administration Regulations,
# 15 C.F.R. 730-744. User has the responsibility to obtain export licenses,
# or other export authority as may be required before exporting such
# information to foreign countries or providing access to foreign nationals.
# In no event shall the California Institute of Technology be liable to any
# party for direct, indirect, special, incidental or consequential damages,
# including lost profits, arising out of the use of this software and its
# documentation, even if the California Institute of Technology has been
# advised of the possibility of such damage.
#
# The California Institute of Technology specifically disclaims any
# warranties, including the implied warranties or merchantability and fitness
# for a particular purpose. The software and documentation provided hereunder
# is on an "as is" basis, and the California Institute of Technology has no
# obligations to provide maintenance, support, updates, enhancements or
# modifications.
#

# @configure_input@

FC = @FC@
FCFLAGS = #@FCFLAGS@
MPIFC = @MPIFC@
MPILIBS = @MPILIBS@
FLAGS_CHECK = @FLAGS_CHECK@
FLAGS_NO_CHECK = @FLAGS_NO_CHECK@
FCFLAGS_f90 = @FCFLAGS_f90@

FCCOMPILE_CHECK =@FCENV@ ${FC} ${FCFLAGS} $(FLAGS_CHECK)
FCCOMPILE_NO_CHECK =@FCENV@ ${FC} ${FCFLAGS} $(FLAGS_NO_CHECK)
MPIFCCOMPILE_CHECK =@FCENV@ ${MPIFC} ${FCFLAGS} $(FLAGS_CHECK)
MPIFCCOMPILE_NO_CHECK =@FCENV@ ${MPIFC} ${FCFLAGS} $(FLAGS_NO_CHECK)

CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@

# extra defines for the Pyrized version
@COND_PYRE_TRUE@MPICC = @MPICC@
@COND_PYRE_TRUE@FCLIBS = @FCLIBS@
@COND_PYRE_TRUE@PYTHON_CPPFLAGS = -I@PYTHON_INCDIR@
@COND_PYRE_TRUE@PYTHON_LDFLAGS = @PYTHON_LDFLAGS@ @PYTHON_LINKFORSHARED@ @PYTHON_BLDLIBRARY@ @PYTHON_LIBS@ @PYTHON_MODLIBS@ @PYTHON_SYSLIBS@ @PYTHON_LDLAST@
@COND_PYRE_TRUE@OUTPUT_DIR = OUTPUT_FILES


O = obj

# objects toggled between the pure Fortran and Pyrized version
@COND_PYRE_FALSE@TOGGLED_OBJECTS = $O/read_value_parameters.o $O/get_value_parameters.o
@COND_PYRE_TRUE@TOGGLED_OBJECTS = $O/PyxParameters.o

# objects for reading/computing parameters, creating values_from_mesher.h
PARAM_OBJECTS = \
	$O/create_header_file.o \
	$O/read_parameter_file.o \
	$O/count_number_of_sources.o \
	$O/compute_parameters.o \
	$O/define_subregions_crust_mantle.o \
	$O/hex_nodes.o \
	$O/save_header_file.o \
	$O/euler_angles.o \
	$O/reduce.o \
	$O/rthetaphi_xyz.o \
	$(TOGGLED_OBJECTS)

# objects common to both the mesher and the solver
COMMON_OBJECTS = \
	$O/attenuation_model.o \
	$O/calc_jacobian.o \
	$O/create_name_database.o \
	$O/exit_mpi.o \
	$O/get_ellipticity.o \
	$O/get_shape3D.o \
	$O/gll_library.o \
	$O/intgrl.o \
	$O/lagrange_poly.o \
	$O/make_ellipticity.o \
	$O/numerical_recipes.o \
	$O/model_prem.o \
	$O/model_iasp91.o \
	$O/model_1066a.o \
	$O/model_ak135.o \
	$O/topo_bathy.o \
	$(PARAM_OBJECTS)

MESHER_OBJECTS = \
	$O/add_topography.o \
	$O/anisotropic_inner_core_model.o \
	$O/anisotropic_mantle_model.o \
	$O/create_chunk_buffers.o \
	$O/create_regions_mesh.o \
	$O/crustal_model.o \
	$O/define_subregions_inner_core.o \
	$O/define_subregions_outer_core.o \
	$O/get_MPI_1D_buffers.o \
	$O/get_MPI_cutplanes_eta.o \
	$O/get_MPI_cutplanes_xi.o \
	$O/get_absorb.o \
	$O/get_flags_boundaries.o \
	$O/get_global.o \
	$O/get_jacobian_boundaries.o \
	$O/get_model.o \
	$O/get_shape2D.o \
	$O/lgndr.o \
	$O/mantle_model.o \
	$O/mesh_radial.o \
	$O/meshfem3D.o \
	$O/save_arrays_solver.o \
	$O/sort_array_coordinates.o \
	$O/write_AVS_DX_global_chunks_data.o \
	$O/write_AVS_DX_global_data.o \
	$O/write_AVS_DX_global_faces_data.o \
	$O/write_AVS_DX_mesh_quality_data.o \
	$O/write_AVS_DX_surface_data.o \
	$(EMPTY_MACRO)

# solver objects with statically allocated arrays; dependent upon
# values_from_mesher.h
SOLVER_STATIC_OBJECTS = \
	$O/assemble_MPI_central_cube.o \
	$O/compute_forces_crust_mantle.o \
	$O/compute_forces_inner_core.o \
	$O/compute_forces_outer_core.o \
	$O/read_arrays_solver.o \
	$O/specfem3D.o \
	$(EMPTY_MACRO)

SOLVER_DYNAMIC_OBJECTS = \
	$O/assemble_MPI_scalar.o \
	$O/assemble_MPI_vector.o \
	$O/comp_source_spectrum.o \
	$O/comp_source_time_function.o \
	$O/compute_arrays_source.o \
	$O/define_derivation_matrices.o \
	$O/get_attenuation_model.o \
	$O/get_cmt.o \
	$O/get_event_info.o \
	$O/locate_receivers.o \
	$O/locate_sources.o \
	$O/make_gravity.o \
	$O/read_arrays_buffers_solver.o \
	$O/recompute_jacobian.o \
	$O/write_seismograms.o \
	$(EMPTY_MACRO)

SOLVER_OBJECTS = $(SOLVER_DYNAMIC_OBJECTS) $(SOLVER_STATIC_OBJECTS)

# objects for the pure Fortran version
@COND_PYRE_FALSE@XMESHFEM_OBJECTS = $O/program_meshfem3D.o $(MESHER_OBJECTS) $(COMMON_OBJECTS) $(EXTRA_OBJECTS)
@COND_PYRE_FALSE@XSPECFEM_OBJECTS = $O/program_specfem3D.o $(SOLVER_OBJECTS) $(COMMON_OBJECTS) $(EXTRA_OBJECTS)

# objects for the Pyrized version
@COND_PYRE_TRUE@PYRE_EXTRA_OBJECTS = $O/misc.o $O/trampoline.o
@COND_PYRE_TRUE@XMESHFEM_OBJECTS = $(COMMON_OBJECTS) $(PYRE_EXTRA_OBJECTS) $(MESHER_OBJECTS) $(SOLVER_DYNAMIC_OBJECTS) 
@COND_PYRE_TRUE@XSPECFEM_OBJECTS = $(COMMON_OBJECTS) $(PYRE_EXTRA_OBJECTS) $(MESHER_OBJECTS) $(SOLVER_OBJECTS) $O/PyxMeshfem.o $O/PyxSpecfem.o $O/PyxMPI.o


####
#### targets
####

# default targets for the pure Fortran version
@COND_PYRE_FALSE@DEFAULT = \
@COND_PYRE_FALSE@	check_buffers_1D \
@COND_PYRE_FALSE@	check_buffers_2D \
@COND_PYRE_FALSE@	check_buffers_corners_chunks \
@COND_PYRE_FALSE@	check_buffers_faces_chunks \
@COND_PYRE_FALSE@	check_mesh_quality_AVS_DX \
@COND_PYRE_FALSE@	combine_AVS_DX \
@COND_PYRE_FALSE@	convolve_source_timefunction \
@COND_PYRE_FALSE@	create_header_file \
@COND_PYRE_FALSE@	create_movie_AVS_DX \
@COND_PYRE_FALSE@	meshfem3D \
@COND_PYRE_FALSE@	specfem3D \
@COND_PYRE_FALSE@	$(EMPTY_MACRO)

# default targets for the Pyrized version
@COND_PYRE_TRUE@DEFAULT = specfem3D


default: $(DEFAULT)

all: clean default

backup:
	cp *f90 *h README_SPECFEM3D_GLOBE DATA/Par_file* Makefile go_mesher go_solver mymachines bak

bak: backup

meshfem3D: xmeshfem3D

specfem3D: xspecfem3D


####
#### rules for executables
####

# rules for the pure Fortran version
@COND_PYRE_FALSE@xmeshfem3D: $(XMESHFEM_OBJECTS)
@COND_PYRE_FALSE@## use MPI here
@COND_PYRE_FALSE@	${MPIFCCOMPILE_CHECK} -o xmeshfem3D $(XMESHFEM_OBJECTS) $(MPILIBS)
@COND_PYRE_FALSE@
@COND_PYRE_FALSE@# solver also depends on values from mesher
@COND_PYRE_FALSE@xspecfem3D: $(XSPECFEM_OBJECTS)
@COND_PYRE_FALSE@## use MPI here
@COND_PYRE_FALSE@	${MPIFCCOMPILE_NO_CHECK} -o xspecfem3D $(XSPECFEM_OBJECTS) $(MPILIBS)
@COND_PYRE_FALSE@

# rules for the Pyrized version
@COND_PYRE_TRUE@xspecfem3D: Specfem3DGlobe/xspecfem3D.tmpl pyspecfem3D
@COND_PYRE_TRUE@	./pyspecfem3D setup.py develop
@COND_PYRE_TRUE@	chmod +x $@
@COND_PYRE_TRUE@
@COND_PYRE_TRUE@pyspecfem3D: main.c $(XMESHFEM_OBJECTS)
@COND_PYRE_TRUE@	${MPICC} $(CFLAGS) -o $@ $(CFLAGS) $(PYTHON_CPPFLAGS) main.c \
@COND_PYRE_TRUE@		$(XMESHFEM_OBJECTS) $(MPILIBS) $(PYTHON_LDFLAGS) $(FCLIBS)
@COND_PYRE_TRUE@
@COND_PYRE_TRUE@$(OUTPUT_DIR)/pyspecfem3D: main.c $(XSPECFEM_OBJECTS)
@COND_PYRE_TRUE@	${MPICC} $(CFLAGS) -o $@ $(CFLAGS) $(PYTHON_CPPFLAGS) -DUSE_MPI main.c \
@COND_PYRE_TRUE@		$(XSPECFEM_OBJECTS) $(MPILIBS) $(PYTHON_LDFLAGS) $(FCLIBS)


check_buffers_1D: xcheck_buffers_1D
check_buffers_2D: xcheck_buffers_2D
check_buffers_corners_chunks: xcheck_buffers_corners_chunks
check_buffers_faces_chunks: xcheck_buffers_faces_chunks
check_mesh_quality_AVS_DX: xcheck_mesh_quality_AVS_DX
combine_AVS_DX: xcombine_AVS_DX
convolve_source_timefunction: xconvolve_source_timefunction
create_header_file: xcreate_header_file
create_movie_AVS_DX: xcreate_movie_AVS_DX
combine_paraview_data: xcombine_paraview_data

xconvolve_source_timefunction: $O/convolve_source_timefunction.o
	${FCCOMPILE_CHECK} -o xconvolve_source_timefunction $O/convolve_source_timefunction.o

xcreate_header_file: $O/program_create_header_file.o $(PARAM_OBJECTS)
	${FCCOMPILE_CHECK} -o xcreate_header_file $O/program_create_header_file.o $(PARAM_OBJECTS)

xcreate_movie_AVS_DX: $O/create_movie_AVS_DX.o $O/read_parameter_file.o \
     $O/compute_parameters.o $O/rthetaphi_xyz.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcreate_movie_AVS_DX $O/create_movie_AVS_DX.o \
     $O/read_parameter_file.o $O/compute_parameters.o $O/rthetaphi_xyz.o $O/read_value_parameters.o $O/get_value_parameters.o

xcombine_AVS_DX: constants.h $O/combine_AVS_DX.o $O/get_cmt.o $O/reduce.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/rthetaphi_xyz.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcombine_AVS_DX $O/combine_AVS_DX.o $O/get_cmt.o \
       $O/reduce.o $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/rthetaphi_xyz.o $O/read_value_parameters.o $O/get_value_parameters.o

xcheck_mesh_quality_AVS_DX: constants.h $O/check_mesh_quality_AVS_DX.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcheck_mesh_quality_AVS_DX $O/check_mesh_quality_AVS_DX.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o

xcheck_buffers_1D: constants.h $O/check_buffers_1D.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcheck_buffers_1D $O/check_buffers_1D.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o

xcheck_buffers_2D: constants.h $O/check_buffers_2D.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcheck_buffers_2D $O/check_buffers_2D.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o

xcheck_buffers_corners_chunks: constants.h $O/check_buffers_corners_chunks.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcheck_buffers_corners_chunks $O/check_buffers_corners_chunks.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o

xcheck_buffers_faces_chunks: constants.h $O/check_buffers_faces_chunks.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o
	${FCCOMPILE_CHECK} -o xcheck_buffers_faces_chunks $O/check_buffers_faces_chunks.o \
       $O/read_parameter_file.o $O/compute_parameters.o $O/create_serial_name_database.o $O/read_value_parameters.o $O/get_value_parameters.o

xcombine_paraview_data: constants.h $O/combine_paraview_data.o $O/write_c_binary.o
	${FCCOMPILE_CHECK} -o xcombine_paraview_data  $O/combine_paraview_data.o $O/write_c_binary.o
clean:
	rm -f $O/* *.o work.pc* *.mod xmeshfem3D xspecfem3D xcombine_AVS_DX xcheck_mesh_quality_AVS_DX xcheck_buffers_1D xcheck_buffers_2D xcheck_buffers_corners_chunks xcheck_buffers_faces_chunks xconvolve_source_timefunction xcreate_header_file xcreate_movie_AVS_DX xcombine_paraview_data PI*

####
#### rule for each .o file below
####

###
### optimized flags and dependence on values from mesher here
###

$O/program_specfem3D.o: constants.h program_specfem3D.f90
	${MPIFCCOMPILE_NO_CHECK} -c -o $O/program_specfem3D.o ${FCFLAGS_f90} program_specfem3D.f90

$O/specfem3D.o: constants.h OUTPUT_FILES/values_from_mesher.h specfem3D.f90
	${MPIFCCOMPILE_NO_CHECK} -c -o $O/specfem3D.o ${FCFLAGS_f90} specfem3D.f90

$O/compute_forces_crust_mantle.o: constants.h OUTPUT_FILES/values_from_mesher.h compute_forces_crust_mantle.f90
	${FCCOMPILE_NO_CHECK} -c -o $O/compute_forces_crust_mantle.o ${FCFLAGS_f90} compute_forces_crust_mantle.f90

$O/compute_forces_outer_core.o: constants.h OUTPUT_FILES/values_from_mesher.h compute_forces_outer_core.f90
	${FCCOMPILE_NO_CHECK} -c -o $O/compute_forces_outer_core.o ${FCFLAGS_f90} compute_forces_outer_core.f90

$O/compute_forces_inner_core.o: constants.h OUTPUT_FILES/values_from_mesher.h compute_forces_inner_core.f90
	${FCCOMPILE_NO_CHECK} -c -o $O/compute_forces_inner_core.o ${FCFLAGS_f90} compute_forces_inner_core.f90

### use MPI here
$O/assemble_MPI_vector.o: constants.h assemble_MPI_vector.f90
	${MPIFCCOMPILE_NO_CHECK} -c -o $O/assemble_MPI_vector.o ${FCFLAGS_f90} assemble_MPI_vector.f90

### use MPI here
$O/assemble_MPI_scalar.o: constants.h assemble_MPI_scalar.f90
	${MPIFCCOMPILE_NO_CHECK} -c -o $O/assemble_MPI_scalar.o ${FCFLAGS_f90} assemble_MPI_scalar.f90

$O/assemble_MPI_central_cube.o: constants.h OUTPUT_FILES/values_from_mesher.h assemble_MPI_central_cube.f90
	${MPIFCCOMPILE_NO_CHECK} -c -o $O/assemble_MPI_central_cube.o ${FCFLAGS_f90} assemble_MPI_central_cube.f90

$O/read_arrays_solver.o: constants.h OUTPUT_FILES/values_from_mesher.h read_arrays_solver.f90
	${FCCOMPILE_CHECK} -c -o $O/read_arrays_solver.o ${FCFLAGS_f90} read_arrays_solver.f90

###
### regular compilation options here
###

$O/convolve_source_timefunction.o: convolve_source_timefunction.f90
	${FCCOMPILE_CHECK} -c -o $O/convolve_source_timefunction.o ${FCFLAGS_f90} convolve_source_timefunction.f90

$O/program_create_header_file.o: program_create_header_file.f90
	${FCCOMPILE_CHECK} -c -o $O/program_create_header_file.o ${FCFLAGS_f90} program_create_header_file.f90

$O/create_header_file.o: create_header_file.f90
	${FCCOMPILE_CHECK} -c -o $O/create_header_file.o ${FCFLAGS_f90} create_header_file.f90

$O/comp_source_time_function.o: comp_source_time_function.f90
	${FCCOMPILE_CHECK} -c -o $O/comp_source_time_function.o ${FCFLAGS_f90} comp_source_time_function.f90

$O/combine_AVS_DX.o: constants.h combine_AVS_DX.f90
	${FCCOMPILE_CHECK} -c -o $O/combine_AVS_DX.o ${FCFLAGS_f90} combine_AVS_DX.f90

$O/check_mesh_quality_AVS_DX.o: constants.h check_mesh_quality_AVS_DX.f90
	${FCCOMPILE_CHECK} -c -o $O/check_mesh_quality_AVS_DX.o ${FCFLAGS_f90} check_mesh_quality_AVS_DX.f90

## use MPI here
$O/create_chunk_buffers.o: constants.h create_chunk_buffers.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/create_chunk_buffers.o ${FCFLAGS_f90} create_chunk_buffers.f90

$O/sort_array_coordinates.o: constants.h sort_array_coordinates.f90
	${FCCOMPILE_CHECK} -c -o $O/sort_array_coordinates.o ${FCFLAGS_f90} sort_array_coordinates.f90

$O/check_buffers_1D.o: constants.h check_buffers_1D.f90
	${FCCOMPILE_CHECK} -c -o $O/check_buffers_1D.o ${FCFLAGS_f90} check_buffers_1D.f90

$O/check_buffers_2D.o: constants.h check_buffers_2D.f90
	${FCCOMPILE_CHECK} -c -o $O/check_buffers_2D.o ${FCFLAGS_f90} check_buffers_2D.f90

$O/check_buffers_corners_chunks.o: constants.h check_buffers_corners_chunks.f90
	${FCCOMPILE_CHECK} -c -o $O/check_buffers_corners_chunks.o ${FCFLAGS_f90} check_buffers_corners_chunks.f90

$O/check_buffers_faces_chunks.o: constants.h check_buffers_faces_chunks.f90
	${FCCOMPILE_CHECK} -c -o $O/check_buffers_faces_chunks.o ${FCFLAGS_f90} check_buffers_faces_chunks.f90

### use MPI here
$O/locate_sources.o: constants.h locate_sources.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/locate_sources.o ${FCFLAGS_f90} locate_sources.f90

### use MPI here
$O/locate_receivers.o: constants.h locate_receivers.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/locate_receivers.o ${FCFLAGS_f90} locate_receivers.f90

## use MPI here
$O/exit_mpi.o: constants.h exit_mpi.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/exit_mpi.o ${FCFLAGS_f90} exit_mpi.f90

$O/read_parameter_file.o: constants.h read_parameter_file.f90
	${FCCOMPILE_CHECK} -c -o $O/read_parameter_file.o ${FCFLAGS_f90} read_parameter_file.f90

$O/count_number_of_sources.o: constants.h count_number_of_sources.f90
	${FCCOMPILE_CHECK} -c -o $O/count_number_of_sources.o ${FCFLAGS_f90} count_number_of_sources.f90

$O/read_value_parameters.o: constants.h read_value_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/read_value_parameters.o ${FCFLAGS_f90} read_value_parameters.f90

$O/compute_parameters.o: constants.h compute_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/compute_parameters.o ${FCFLAGS_f90} compute_parameters.f90

$O/get_value_parameters.o: constants.h get_value_parameters.f90
	${FCCOMPILE_CHECK} -c -o $O/get_value_parameters.o ${FCFLAGS_f90} get_value_parameters.f90

$O/topo_bathy.o: constants.h topo_bathy.f90
	${FCCOMPILE_CHECK} -c -o $O/topo_bathy.o ${FCFLAGS_f90} topo_bathy.f90

$O/calc_jacobian.o: constants.h calc_jacobian.f90
	${FCCOMPILE_CHECK} -c -o $O/calc_jacobian.o ${FCFLAGS_f90} calc_jacobian.f90

$O/crustal_model.o: constants.h crustal_model.f90
	${FCCOMPILE_CHECK} -c -o $O/crustal_model.o ${FCFLAGS_f90} crustal_model.f90

$O/make_ellipticity.o: constants.h make_ellipticity.f90
	${FCCOMPILE_CHECK} -c -o $O/make_ellipticity.o ${FCFLAGS_f90} make_ellipticity.f90

$O/get_jacobian_boundaries.o: constants.h get_jacobian_boundaries.f90
	${FCCOMPILE_CHECK} -c -o $O/get_jacobian_boundaries.o ${FCFLAGS_f90} get_jacobian_boundaries.f90

$O/create_movie_AVS_DX.o: constants.h create_movie_AVS_DX.f90
	${FCCOMPILE_CHECK} -c -o $O/create_movie_AVS_DX.o ${FCFLAGS_f90} create_movie_AVS_DX.f90

$O/get_flags_boundaries.o: constants.h get_flags_boundaries.f90
	${FCCOMPILE_CHECK} -c -o $O/get_flags_boundaries.o ${FCFLAGS_f90} get_flags_boundaries.f90

$O/get_MPI_cutplanes_xi.o: constants.h get_MPI_cutplanes_xi.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_cutplanes_xi.o ${FCFLAGS_f90} get_MPI_cutplanes_xi.f90

$O/get_MPI_cutplanes_eta.o: constants.h get_MPI_cutplanes_eta.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_cutplanes_eta.o ${FCFLAGS_f90} get_MPI_cutplanes_eta.f90

$O/get_MPI_1D_buffers.o: constants.h get_MPI_1D_buffers.f90
	${FCCOMPILE_CHECK} -c -o $O/get_MPI_1D_buffers.o ${FCFLAGS_f90} get_MPI_1D_buffers.f90

$O/get_cmt.o: constants.h get_cmt.f90
	${FCCOMPILE_CHECK} -c -o $O/get_cmt.o ${FCFLAGS_f90} get_cmt.f90

$O/get_event_info.o: constants.h get_event_info.f90
	${FCCOMPILE_CHECK} -c -o $O/get_event_info.o ${FCFLAGS_f90} get_event_info.f90

$O/get_ellipticity.o: constants.h get_ellipticity.f90
	${FCCOMPILE_CHECK} -c -o $O/get_ellipticity.o ${FCFLAGS_f90} get_ellipticity.f90

$O/get_global.o: constants.h get_global.f90
	${FCCOMPILE_CHECK} -c -o $O/get_global.o ${FCFLAGS_f90} get_global.f90

$O/make_gravity.o: constants.h make_gravity.f90
	${FCCOMPILE_CHECK} -c -o $O/make_gravity.o ${FCFLAGS_f90} make_gravity.f90

$O/rthetaphi_xyz.o: constants.h rthetaphi_xyz.f90
	${FCCOMPILE_CHECK} -c -o $O/rthetaphi_xyz.o ${FCFLAGS_f90} rthetaphi_xyz.f90

$O/get_model.o: constants.h get_model.f90
	${FCCOMPILE_CHECK} -c -o $O/get_model.o ${FCFLAGS_f90} get_model.f90

$O/write_AVS_DX_global_faces_data.o: constants.h write_AVS_DX_global_faces_data.f90
	${FCCOMPILE_CHECK} -c -o $O/write_AVS_DX_global_faces_data.o ${FCFLAGS_f90} write_AVS_DX_global_faces_data.f90

$O/write_AVS_DX_global_chunks_data.o: constants.h write_AVS_DX_global_chunks_data.f90
	${FCCOMPILE_CHECK} -c -o $O/write_AVS_DX_global_chunks_data.o ${FCFLAGS_f90} write_AVS_DX_global_chunks_data.f90

$O/write_AVS_DX_surface_data.o: constants.h write_AVS_DX_surface_data.f90
	${FCCOMPILE_CHECK} -c -o $O/write_AVS_DX_surface_data.o ${FCFLAGS_f90} write_AVS_DX_surface_data.f90

$O/write_AVS_DX_global_data.o: constants.h write_AVS_DX_global_data.f90
	${FCCOMPILE_CHECK} -c -o $O/write_AVS_DX_global_data.o ${FCFLAGS_f90} write_AVS_DX_global_data.f90

$O/write_AVS_DX_mesh_quality_data.o: constants.h write_AVS_DX_mesh_quality_data.f90
	${FCCOMPILE_CHECK} -c -o $O/write_AVS_DX_mesh_quality_data.o ${FCFLAGS_f90} write_AVS_DX_mesh_quality_data.f90

$O/get_shape3D.o: constants.h get_shape3D.f90
	${FCCOMPILE_CHECK} -c -o $O/get_shape3D.o ${FCFLAGS_f90} get_shape3D.f90

$O/get_shape2D.o: constants.h get_shape2D.f90
	${FCCOMPILE_CHECK} -c -o $O/get_shape2D.o ${FCFLAGS_f90} get_shape2D.f90

$O/hex_nodes.o: constants.h hex_nodes.f90
	${FCCOMPILE_CHECK} -c -o $O/hex_nodes.o ${FCFLAGS_f90} hex_nodes.f90

$O/intgrl.o: constants.h intgrl.f90
	${FCCOMPILE_CHECK} -c -o $O/intgrl.o ${FCFLAGS_f90} intgrl.f90

$O/mantle_model.o: constants.h mantle_model.f90
	${FCCOMPILE_CHECK} -c -o $O/mantle_model.o ${FCFLAGS_f90} mantle_model.f90

$O/mesh_radial.o: constants.h mesh_radial.f90
	${FCCOMPILE_CHECK} -c -o $O/mesh_radial.o ${FCFLAGS_f90} mesh_radial.f90

$O/get_absorb.o: constants.h get_absorb.f90
	${FCCOMPILE_CHECK} -c -o $O/get_absorb.o ${FCFLAGS_f90} get_absorb.f90

$O/euler_angles.o: constants.h euler_angles.f90
	${FCCOMPILE_CHECK} -c -o $O/euler_angles.o ${FCFLAGS_f90} euler_angles.f90

## use MPI here
$O/program_meshfem3D.o: constants.h program_meshfem3D.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/program_meshfem3D.o ${FCFLAGS_f90} program_meshfem3D.f90

## use MPI here
$O/meshfem3D.o: constants.h meshfem3D.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/meshfem3D.o ${FCFLAGS_f90} meshfem3D.f90

$O/numerical_recipes.o: constants.h numerical_recipes.f90
	${FCCOMPILE_CHECK} -c -o $O/numerical_recipes.o ${FCFLAGS_f90} numerical_recipes.f90

$O/lgndr.o: constants.h lgndr.f90
	${FCCOMPILE_CHECK} -c -o $O/lgndr.o ${FCFLAGS_f90} lgndr.f90

$O/model_prem.o: constants.h model_prem.f90
	${FCCOMPILE_CHECK} -c -o $O/model_prem.o ${FCFLAGS_f90} model_prem.f90

$O/model_iasp91.o: constants.h model_iasp91.f90
	${FCCOMPILE_CHECK} -c -o $O/model_iasp91.o ${FCFLAGS_f90} model_iasp91.f90

$O/model_1066a.o: constants.h model_1066a.f90
	${FCCOMPILE_CHECK} -c -o $O/model_1066a.o ${FCFLAGS_f90} model_1066a.f90

$O/model_ak135.o: constants.h model_ak135.f90
	${FCCOMPILE_CHECK} -c -o $O/model_ak135.o ${FCFLAGS_f90} model_ak135.f90

$O/anisotropic_mantle_model.o: constants.h anisotropic_mantle_model.f90
	${FCCOMPILE_CHECK} -c -o $O/anisotropic_mantle_model.o ${FCFLAGS_f90} anisotropic_mantle_model.f90

$O/anisotropic_inner_core_model.o: constants.h anisotropic_inner_core_model.f90
	${FCCOMPILE_CHECK} -c -o $O/anisotropic_inner_core_model.o ${FCFLAGS_f90} anisotropic_inner_core_model.f90

$O/reduce.o: constants.h reduce.f90
	${FCCOMPILE_CHECK} -c -o $O/reduce.o ${FCFLAGS_f90} reduce.f90

$O/save_arrays_solver.o: constants.h save_arrays_solver.f90
	${FCCOMPILE_CHECK} -c -o $O/save_arrays_solver.o ${FCFLAGS_f90} save_arrays_solver.f90

$O/save_header_file.o: constants.h save_header_file.f90
	${FCCOMPILE_CHECK} -c -o $O/save_header_file.o ${FCFLAGS_f90} save_header_file.f90

$O/comp_source_spectrum.o: constants.h comp_source_spectrum.f90
	${FCCOMPILE_CHECK} -c -o $O/comp_source_spectrum.o ${FCFLAGS_f90} comp_source_spectrum.f90

$O/add_topography.o: constants.h add_topography.f90
	${FCCOMPILE_CHECK} -c -o $O/add_topography.o ${FCFLAGS_f90} add_topography.f90

$O/write_seismograms.o: constants.h write_seismograms.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/write_seismograms.o ${FCFLAGS_f90} write_seismograms.f90

$O/lagrange_poly.o: constants.h lagrange_poly.f90
	${FCCOMPILE_CHECK} -c -o $O/lagrange_poly.o ${FCFLAGS_f90} lagrange_poly.f90

$O/recompute_jacobian.o: constants.h recompute_jacobian.f90
	${FCCOMPILE_CHECK} -c -o $O/recompute_jacobian.o ${FCFLAGS_f90} recompute_jacobian.f90

$O/create_regions_mesh.o: constants.h create_regions_mesh.f90
	${FCCOMPILE_CHECK} -c -o $O/create_regions_mesh.o ${FCFLAGS_f90} create_regions_mesh.f90

$O/create_name_database.o: constants.h create_name_database.f90
	${FCCOMPILE_CHECK} -c -o $O/create_name_database.o ${FCFLAGS_f90} create_name_database.f90

$O/create_serial_name_database.o: constants.h create_serial_name_database.f90
	${FCCOMPILE_CHECK} -c -o $O/create_serial_name_database.o ${FCFLAGS_f90} create_serial_name_database.f90

$O/define_subregions_crust_mantle.o: constants.h define_subregions_crust_mantle.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions_crust_mantle.o ${FCFLAGS_f90} define_subregions_crust_mantle.f90

$O/define_subregions_outer_core.o: constants.h define_subregions_outer_core.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions_outer_core.o ${FCFLAGS_f90} define_subregions_outer_core.f90

$O/define_subregions_inner_core.o: constants.h define_subregions_inner_core.f90
	${FCCOMPILE_CHECK} -c -o $O/define_subregions_inner_core.o ${FCFLAGS_f90} define_subregions_inner_core.f90

## use MPI here
$O/read_arrays_buffers_solver.o: constants.h read_arrays_buffers_solver.f90
	${MPIFCCOMPILE_CHECK} -c -o $O/read_arrays_buffers_solver.o ${FCFLAGS_f90} read_arrays_buffers_solver.f90

$O/define_derivation_matrices.o: constants.h define_derivation_matrices.f90
	${FCCOMPILE_CHECK} -c -o $O/define_derivation_matrices.o ${FCFLAGS_f90} define_derivation_matrices.f90

$O/compute_arrays_source.o: constants.h compute_arrays_source.f90
	${FCCOMPILE_CHECK} -c -o $O/compute_arrays_source.o ${FCFLAGS_f90} compute_arrays_source.f90

$O/get_attenuation_model.o: constants.h get_attenuation_model.f90
	${FCCOMPILE_CHECK} -c -o $O/get_attenuation_model.o ${FCFLAGS_f90} get_attenuation_model.f90

$O/attenuation_model.o: constants.h attenuation_model.f90
	${FCCOMPILE_CHECK} -c -o $O/attenuation_model.o ${FCFLAGS_f90} attenuation_model.f90

$O/gll_library.o: constants.h gll_library.f90
	${FCCOMPILE_CHECK} -c -o $O/gll_library.o ${FCFLAGS_f90} gll_library.f90

$O/combine_paraview_data.o: constants.h combine_paraview_data.f90
	${FCCOMPILE_CHECK} -c -o $O/combine_paraview_data.o ${FCFLAGS_f90} combine_paraview_data.f90

$O/write_c_binary.o: write_c_binary.c config.h
	$(CC) $(CFLAGS) -c -o $O/write_c_binary.o write_c_binary.c

###
### additional rules for the Pyrized version
###

$O/misc.o: misc.c config.h
	${MPICC} $(CFLAGS) -c $(PYTHON_CPPFLAGS) -o $O/misc.o misc.c

$O/PyxParameters.o: PyxParameters.c config.h
	${CC} -c $(CFLAGS) $(PYTHON_CPPFLAGS) -o $O/PyxParameters.o PyxParameters.c

$O/PyxMeshfem.o: PyxMeshfem.c config.h
	${CC} -c $(CFLAGS) $(PYTHON_CPPFLAGS) -o $O/PyxMeshfem.o PyxMeshfem.c

$O/PyxSpecfem.o: PyxSpecfem.c config.h
	${CC} -c $(CFLAGS) $(PYTHON_CPPFLAGS) -o $O/PyxSpecfem.o PyxSpecfem.c

$O/PyxMPI.o: PyxMPI.c
	${MPICC} -c $(CFLAGS) $(PYTHON_CPPFLAGS) -o $O/PyxMPI.o PyxMPI.c

$O/trampoline.o: trampoline.f90
	${FCCOMPILE_NO_CHECK} -c -o $O/trampoline.o ${FCFLAGS_f90} trampoline.f90

# target to update the Pyrex-generated code
# requires Pyrex:  http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/
pyrex:
	pyrexc PyxParameters.pyx -o PyxParameters.c
	pyrexc PyxMeshfem.pyx -o PyxMeshfem.c
	pyrexc PyxSpecfem.pyx -o PyxSpecfem.c
	pyrexc PyxMPI.pyx -o PyxMPI.c
