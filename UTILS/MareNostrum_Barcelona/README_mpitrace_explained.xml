<?xml version='1.0'?>

<!-- Here comes the MPItrace configuration.
     As a general rule, "enabled" means that the feature is enabled :)  If
     it's not enabled, then the value can be set to some default.
-->

<!-- Must we activate the tracing? Which is the tracing mode? (detail/bursts) Where is it located? Which kind of trace? Version of the XML parser?-->
<trace enabled="yes"
 home="/gpfs/apps/CEPBATOOLS/mpitrace-mx/64"
 initial-mode="detail"
 type="paraver"
 xml-parser-id="Id: xml-parse.c,v 1.20 2008/05/19 13:55:11 harald Exp $"
>

  <!-- Configuration of some MPI dependant values -->
  <mpi enabled="yes">
    <!-- Gather counters in the MPI routines? -->
    <counters enabled="yes" />
  </mpi>

  <!-- Emit information of the callstack -->
  <callers enabled="yes">
    <!-- At MPI calls, select depth level -->
    <mpi enabled="yes">1-3</mpi>
    <!-- At sampling points, select depth level -->
    <sampling enabled="yes">1-5</sampling>
  </callers>

  <!-- Configuration of some OpenMP dependant values -->
  <openmp enabled="no">
    <!-- If the library instruments OpenMP, shall we gather info about locks?
         Obtaining such information can make the final trace quite large.
    -->
    <locks enabled="no" />
    <!-- Gather counters in the OpenMP routines? -->
    <counters enabled="yes" />
  </openmp>

  <!-- Configuration of User Functions -->
  <user-functions enabled="yes" list="/home/bsc41/bsc41273/user-functions.dat">
    <!-- Set a depth limit for the UF routines -->
    <max-depth enabled="no">3</max-depth>
    <!-- Gather counters on the UF routines? -->
    <counters enabled="yes" />
  </user-functions>

  <!-- Configure which software/hardware counters must be collected -->
  <counters enabled="yes">
    <!-- Configure the CPU hardware counters. You can define here as many sets
         as you want. You can also define if MPI/OpenMP calls must report such
         counters.
         Starting-set property defines which set is chosen from every task.
         Possible values are:
           - cyclic : The sets are distributed in a cyclic fashion among all
           tasks. So Task 0 takes set 1, Task 1 takes set 2,...
           - block  : The sets are distributed in block fashion among all tasks.
           Task [0..i-1] takes set 1, Task [i..2*i-1] takes set 2, ...
           - Number : All the tasks will start with the given set 
           (from 1..N).
    -->
    <cpu enabled="yes" starting-set-distribution="1">
      <!-- In this example, we configure two sets of counters. The first will 
           be changed into the second after 5 calls to some collective
           operation on MPI_COMM_WORLD. Once the second is activated, it will
           turn to the first after 5seconds (aprox. depending on the MPI calls
           granularity)
           If you want that any set be counting forever, just don't set
           changeat-globalops, or, changeat-time.

           Each set has it's own properties.
           domain -> in which domain must PAPI obtain the information (see
                       PAPI info)
           changeat-globalops=num -> choose the next set after num
                       MPI_COMM_WORLD operations
           changeat-time=numTime -> choose the next set after num Time
                       (for example 5s, 15m,..)
      -->
      <set enabled="yes" domain="all" changeat-globalops="5">
        PAPI_TOT_INS,PAPI_TOT_CYC,PAPI_L1_DCM
        <!-- Samples the application based on a frequency on a selected HWC  -->
        <sampling enabled="yes" frequency="100000000">PAPI_TOT_CYC</sampling>
      </set>
      <set enabled="yes" domain="user" changeat-globalops="5">
        PAPI_TOT_INS,PAPI_FP_INS,PAPI_TOT_CYC
      </set>
    </cpu>

    <!-- Do we want to gather information of the network counters?
         Nowadays we can gather information about MX/GM cards.
     -->
    <network enabled="yes" />

    <!-- Obtain resource usage information -->
    <resource-usage enabled="yes" />
  </counters>

  <!-- Define the characteristics of the tracing storage. If not defined,
       or set, the tracing will send the traces to the current directory
       with a default output name.
  -->
  <storage enabled="no">
    <!-- The intermediate files will take the name of the application -->
    <trace-prefix enabled="yes">TRACE</trace-prefix>
    <!-- Stop the tracing when the intermediate file reaches this amount of MBs -->
    <size enabled="no">5</size>
    <!-- Where must we store the MPIT files while the app runs?
         Set make-dir to yes if you want to make this directory before running -->
    <temporal-directory enabled="yes" make-dir="no">/scratch</temporal-directory>
    <!-- Where must we store the MPIT files once the app ends?
         Set make-dir to yes if you want to make this directory before running -->
    <final-directory enabled="yes" make-dir="no">/gpfs/scratch/bsc41/bsc41273</final-directory>
    <!-- Must the MPITs be gathered once the app ends into a single node? -->
    <gather-mpits enabled="no" />
  </storage>

  <!-- Buffer configuration -->
  <buffer enabled="yes">
    <!-- How many events can we handle before any flush -->
    <size enabled="yes">150000</size>
    <!-- Use the event buffer in a circular manner? You can use this option to
         trace the last set of events. Needs MPI global routines operating on
         MPI_COMM_WORLD communicator to be merged
    -->
    <circular enabled="no" />
  </buffer>

  <!-- Control tracing -->
  <trace-control enabled="yes">
    <!-- We can start the application with a "latent tracing" and wake it up
         once a control file is created. Use the property 'frequency' to
         choose at which frequency this check must be done. If not supplied,
         it will be checked every 100 global operations on MPI_COMM_WORLD.
    -->
    <file enabled="no" frequency="5m">/gpfs/scratch/bsc41/bsc41273/control</file>
    <!-- 
    -->
    <global-ops enabled="no"></global-ops>
    <!-- A signal can be used to terminate the tracing. Available values can be
         only USR1/USR2 Some MPI implementations handle one of those, so check
         first which is available to you. -->
    <remote-control enabled="no" method="signal">USR1</remote-control>
  </trace-control>

  <!-- Other options -->
  <others enabled="yes">
    <!-- Want to force a minimum amount of time of tracing? Here we force 10
         minutes -->
    <minimum-time enabled="no">10m</minimum-time>
  </others>

  <!-- Bursts library enabled? This requires an special library! -->
  <bursts enabled="no">
    <!-- Specify the threshold. This is mandatory! In this example, the
         threshold is limitted to 500 microseconds
     -->
    <threshold enabled="yes">500u</threshold>
    <!-- Report MPI statistics? -->
    <mpi-statistics enabled="yes" />
  </bursts>

  <!-- Cell BE specific tracing options -->
  <cell enabled="no">
    <!-- Limit the size of the intermediate files for every SPU -->
    <spu-file-size enabled="yes">5</spu-file-size>
    <!-- Which is the buffer size per SPU? -->
    <spu-buffer-size enabled="yes">64</spu-buffer-size>
    <!-- Which DMA tag to use for the tracing flushes? -->
    <spu-dma-channel enabled="yes">2</spu-dma-channel>
  </cell>

</trace>
