----------------------------------------------------------------------
README
----------------------------------------------------------------------

////////////////////////////////WARNING///////////////////////////////////////////
Do ***NOT*** try this example until you have become familiar with other examples
Also, make sure that you understand the theory in:
Noise Cross-Correlation Sensitivity Kernels (Tromp et al., 2010, GJI)
////////////////////////////////WARNING///////////////////////////////////////////


**************
0. README
**************

   This example shows how to model noise correlations using a non-uniform noise distribution.
   Here, noise correlations are modeled on Mexico using a vertical noise distribution
   stronger on the ocean than in the continent (see noise_distribution.png).
   

**************
1. Structure
**************

   This file                                                  ---  README
   Folders containing default input files for the example     ---  ./DATA       ./NOISE_TOMOGRAPHY
   Script to generate noise distribution                      ---  generate_noise_distribution_direction.py
   Script to determine ocean location                         ---  geo.py
   Noise distribution parameters                              ---  parfile_noise.yaml
   Script to generate noise source time function              ---  run_generate_S_squared.sh
   Input for xcreate_movie_shakemap_AVS_DX_GMT                ---  generate_movie_input.txt  
   Job script                                                 ---  run_this_example.sh

**************
2. Usage
**************

   If you have at least 4 cores and mpif90 works on your workstation, you can run this example on your workstation.
   Simply use: ./run_this_example.sh

   If you don't, you have to follow the commands listed in ./run_this_example.sh, make modifications if needed.
   Those commands in ./run_this_example.sh should be self-explanatory.

**************
3. Details
**************

   3.0 - As mentioned before, you can always refer to "Noise Cross-Correlation Sensitivity Kernels (Tromp et al., 2010, GJI)" for theoretical perspective,
         and the Manual --- "../../doc/USER_MANUAL/manual_SPECFEM3D_GLOBE.pdf" for technical issues.

   3.1 - Model
         This example is located in Mexico. The model is 1D_isotropic_prem and includes topography.

   3.2 - Source and Receivers
         Since NO earthquakes are allowed for noise simulations, we have a ZERO moment tensor in "./DATA/CMTSOLUTION"
         As for receivers, instead of having many stations, we have only two receivers in "./DATA/STATIONS"

   3.3 - Noise statistics
         "./NOISE_TOMOGRAPHY" contains:
         S_squared --- the ensemble-averaged noise power spectrum.
                       it can be generated by calling run_generate_S_squared:
         nu_main   --- the component of seismogram at the 'main' receiver, which is used to calculate cross-correlations
                       (the components at 'secondary' receivers are components of the simulated seismograms obtained in step 2 of noise simulations)
         irec_main_noise
                   --- main receiver ID
         use_external_noise_distribution
                   --- flag indicating if an external noise distribution must be used (0 = .false., 1 = .true.)
                       if set to zero or if the file does not exist, the noise distribution defined in
                       "src/specfem3d/noise_tomography.f90" will be used (the default assumes vertical noises and
                       uniform distribution)
         noise_distribution
                   --- contains the user-defined noise distribution and direction binary files; they must be copied to DATABASES_MPI
         mask_noise.bin
                   --- noise distribution file saved by the solver.
                       this file is necessary to run "generate_noise_distribution_direction.py" and define a custom
                       noise distribution, as it contains the coordinates of the surface GLL points.
                       for more information, read the comments in "generate_noise_distribution_direction.py".

   3.4 - Utils
         "generate_noise_distribution_direction.py"
             --- is used to generate binary files that define the noise distribution and the noise direction.
                 for more details, see the comments on the script.
        
         "parfile_noise.yaml"
             --- defines the noise distribution parameters

**************
4. Results
**************

   At the end of the simulations, movies of the generating field and the correlation field will be stored in ./OUTPUT_FILES_1 and ./OUTPUT_FILES_2, respectively.

   These movies can be directly viewed on Paraview. Once you visualize them in Paraview, you should see a picture similar to correlation_field_snapshot_400.png

